fmt_number(columns = c("Population", "Rounded_Population"), use_seps = TRUE) %>%
cols_label(Area = "Area Name", Population = "Population", Rounded_Population = "Rounded Population")
print(selected_table)
# Calculate the ratio of each area's rounded population to the total (out of 3000)
selected_df$Population_Ratio <- selected_df$Rounded_Population / total_population * 3000
# Sort the data frame by Rounded Population in descending order
selected_df <- selected_df[order(selected_df$Rounded_Population, decreasing = TRUE), ]
# Create a gt table for selected rows
selected_table <- gt(selected_df) %>%
tab_header(title = "Selected Areas and Population") %>%
fmt_number(columns = c("Rounded_Population", "Population_Ratio"), use_seps = TRUE) %>%
cols_label(Area = "Area Name", Rounded_Population = "Rounded Population", Population_Ratio = "Population Ratio")
# Print the selected table
print(selected_table)
area_names <- data$Area[2:90]
population <- data$pop[2:90]
# Create a data frame
area_df <- data.frame(Area = area_names, Population = population)
# Sort the data frame by Population in descending order
area_df <- area_df[order(area_df$Population, decreasing = TRUE), ]
# Create a gt table
table <- gt(area_df) %>%
tab_header(title = "Areas and Population") %>%
fmt_number(columns = c("Population"), use_seps = TRUE) %>%
cols_label(Area = "Area Name", Population = "Population")
# Print the table
print(table)
# Extract selected rows
selected_rows <- c(4, 30, 54, 61, 74, 84)
selected_areas <- data$Area[selected_rows]
selected_population <- data$pop[selected_rows]
# Create a data frame for selected rows
selected_df <- data.frame(Area = selected_areas, Population = selected_population)
# Create a gt table for selected rows
selected_table <- gt(selected_df) %>%
tab_header(title = "Selected Areas and Population") %>%
fmt_number(columns = c("Population"), use_seps = TRUE) %>%
cols_label(Area = "Area Name", Population = "Population")
# Print the selected table
print(selected_table)
selected_df$Rounded_Population <- round(selected_df$Population, -3)
selected_table <- gt(selected_df) %>%
tab_header(title = "Selected Areas and Population") %>%
fmt_number(columns = c("Population", "Rounded_Population"), use_seps = TRUE) %>%
cols_label(Area = "Area Name", Population = "Population", Rounded_Population = "Rounded Population")
print(selected_table)
# Calculate the ratio of each area's rounded population to the total (out of 3000)
selected_df$Population_Ratio <- selected_df$Rounded_Population / total_population * 3000
# Sort the data frame by Rounded Population in descending order
selected_df <- selected_df[order(selected_df$Rounded_Population, decreasing = TRUE), ]
# Create a gt table for selected rows
selected_table <- gt(selected_df) %>%
tab_header(title = "Selected Areas and Population") %>%
fmt_number(columns = c("Rounded_Population", "Population_Ratio"), use_seps = TRUE) %>%
cols_label(Area = "Area Name", Rounded_Population = "Rounded Population", Population_Ratio = "Population Ratio")
# Print the selected table
print(selected_table)
area_names <- data$Area[2:90]
population <- data$pop[2:90]
# Create a data frame
area_df <- data.frame(Area = area_names, Population = population)
# Sort the data frame by Population in descending order
area_df <- area_df[order(area_df$Population, decreasing = TRUE), ]
# Create a gt table
table <- gt(area_df) %>%
tab_header(title = "Areas and Population") %>%
fmt_number(columns = c("Population"), use_seps = TRUE) %>%
cols_label(Area = "Area Name", Population = "Population")
# Print the table
print(table)
# Extract selected rows
selected_rows <- c(4, 30, 54, 61, 74, 84)
selected_areas <- data$Area[selected_rows]
selected_population <- data$pop[selected_rows]
# Create a data frame for selected rows
selected_df <- data.frame(Area = selected_areas, Population = selected_population)
# Create a gt table for selected rows
selected_table <- gt(selected_df) %>%
tab_header(title = "Selected Areas and Population") %>%
fmt_number(columns = c("Population"), use_seps = TRUE) %>%
cols_label(Area = "Area Name", Population = "Population")
# Print the selected table
print(selected_table)
selected_df$Rounded_Population <- round(selected_df$Population, -3)
selected_table <- gt(selected_df) %>%
tab_header(title = "Selected Areas and Population") %>%
fmt_number(columns = c("Population", "Rounded_Population"), use_seps = TRUE) %>%
cols_label(Area = "Area Name", Population = "Population", Rounded_Population = "Rounded Population")
print(selected_table)
# Calculate the ratio of each area's rounded population to the total (out of 3000)
selected_df$Population_Ratio <- selected_df$Rounded_Population / total_population * 3000
# Sort the data frame by Rounded Population in descending order
selected_df <- selected_df[order(selected_df$Rounded_Population, decreasing = TRUE), ]
# Create a gt table for selected rows
selected_table <- gt(selected_df) %>%
tab_header(title = "Selected Areas and Population") %>%
fmt_number(columns = c("Rounded_Population", "Population_Ratio"), use_seps = TRUE) %>%
cols_label(Area = "Area Name", Rounded_Population = "Rounded Population", Population_Ratio = "Population Ratio")
# Print the selected table
print(selected_table)
selected_df$Custom_Values <- c(1700, 400, 400, 300, 1000, 100)
# Create a gt table for selected rows
selected_table <- gt(selected_df) %>%
tab_header(title = "Selected Areas and Population") %>%
fmt_number(columns = c("Rounded_Population", "Population_Ratio"), use_seps = TRUE) %>%
cols_label(Area = "Area Name", Rounded_Population = "Rounded Population", Population_Ratio = "Population Ratio", Custom_Values = "Custom Values")
# Print the selected table
print(selected_table)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Set seed for reproducibility
set.seed(123)
n <- 200  # Total number of students
threshold <- 70  # Threshold for tutoring
# Simulate test scores (continuous independent variable)
test_scores <- runif(n, min = 50, max = 100)
# Simulate treatment assignment
treatment <- ifelse(test_scores >= threshold, 1, 0)
# Simulate academic performance (outcome)
# Performance is influenced by treatment and some random noise
treatment_effect <- 5  # Expected increase in performance due to tutoring
noise_sd <- 2  # Standard deviation of random noise
performance <- treatment * treatment_effect + rnorm(n, mean = 0, sd = noise_sd)
# Combine data into a data frame
data <- data.frame(Test_Scores = test_scores, Treatment = treatment, Performance = performance)
ggplot(data, aes(x = Test_Scores, y = Performance)) +
geom_point() +
geom_vline(xintercept = threshold, linetype = "dashed", color = "red") +
labs(x = "Test Scores", y = "Academic Performance") +
theme_minimal()
summary(rdd_model)
# Combine data into a data frame
data <- data.frame(Test_Scores = test_scores, Treatment = treatment, Performance = performance)
# Create a scatter plot with a vertical line at the threshold
ggplot(data, aes(x = Test_Scores, y = Performance)) +
geom_point() +
geom_vline(xintercept = threshold, linetype = "dashed", color = "red") +
labs(x = "Test Scores", y = "Academic Performance") +
theme_minimal()
summary(rdd_model)
# Set seed for reproducibility
set.seed(123)
# Simulate data
n <- 200  # Total number of students
threshold <- 70  # Threshold for tutoring
# Simulate test scores (continuous independent variable)
test_scores <- runif(n, min = 50, max = 100)
# Simulate treatment assignment
treatment <- ifelse(test_scores >= threshold, 1, 0)
# Simulate academic performance (outcome)
# Performance is influenced by treatment and some random noise
treatment_effect <- 5  # Expected increase in performance due to tutoring
noise_sd <- 2  # Standard deviation of random noise
performance <- treatment * treatment_effect + rnorm(n, mean = 0, sd = noise_sd)
# Combine data into a data frame
data <- data.frame(Test_Scores = test_scores, Treatment = treatment, Performance = performance)
ggplot(data, aes(x = Test_Scores, y = Performance)) +
geom_point() +
geom_vline(xintercept = threshold, linetype = "dashed", color = "red") +
labs(x = "Test Scores", y = "Academic Performance") +
theme_minimal()
ggplot(data, aes(x = Test_Scores, y = Performance)) +
geom_point() +
geom_vline(xintercept = threshold, linetype = "dashed", color = "red") +
labs(x = "Test Scores", y = "Academic Performance") +
theme_minimal()
# Estimate treatment effect using RDD
rdd_model <- lm(Performance ~ Treatment + Test_Scores + I(Test_Scores >= threshold), data = data)
# Display the summary of the regression model
summary(rdd_model)
install.packages("gt")
install.packages("broom")
library(gt)
library(broom)
# Set seed for reproducibility
set.seed(123)
n <- 200  # Total number of students
threshold <- 70  # Threshold for tutoring
# Simulate test scores (continuous independent variable)
test_scores <- runif(n, min = 50, max = 100)
# Simulate treatment assignment
treatment <- ifelse(test_scores >= threshold, 1, 0)
treatment_effect <- 5  # Expected increase in performance due to tutoring
noise_sd <- 2  # Standard deviation of random noise
performance <- treatment * treatment_effect + rnorm(n, mean = 0, sd = noise_sd)
# Combine data into a data frame
data <- data.frame(Test_Scores = test_scores, Treatment = treatment, Performance = performance)
plot <- ggplot(data, aes(x = Test_Scores, y = Performance)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
geom_vline(xintercept = threshold, linetype = "dashed", color = "red") +
labs(x = "Test Scores", y = "Academic Performance") +
theme_minimal()
# Display the plot
plot
# Estimate treatment effect using RDD
rdd_model <- lm(Performance ~ Treatment + Test_Scores + I(Test_Scores >= threshold), data = data)
# Display the summary of the regression model using gt package
rdd_summary <- broom::tidy(rdd_model) %>%
gt() %>%
tab_header(title = "Regression Discontinuity Design (RDD) Summary")
# Display the summary table
rdd_summary
# Set seed for reproducibility
set.seed(123)
# Simulate data
n <- 200  # Total number of students
threshold <- 70  # Threshold for tutoring
# Simulate test scores (continuous independent variable)
test_scores <- runif(n, min = 50, max = 100)
# Simulate treatment assignment
treatment <- ifelse(test_scores >= threshold, 1, 0)
treatment_effect <- 5  # Expected increase in performance due to tutoring
noise_sd <- 2  # Standard deviation of random noise
performance <- treatment * treatment_effect + rnorm(n, mean = 0, sd = noise_sd)
# Combine data into a data frame
data <- data.frame(Test_Scores = test_scores, Treatment = treatment, Performance = performance)
plot <- ggplot(data, aes(x = Test_Scores, y = Performance)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x * I(x < threshold), se = FALSE, color = "blue") +
geom_smooth(method = "lm", formula = y ~ x * I(x >= threshold), se = FALSE, color = "green") +
geom_vline(xintercept = threshold, linetype = "dashed", color = "red") +
labs(x = "Test Scores", y = "Academic Performance") +
theme_minimal()
# Display the plot
plot
# Estimate treatment effect using RDD
rdd_model <- lm(Performance ~ Treatment + Test_Scores + I(Test_Scores >= threshold), data = data)
rdd_summary <- tidy(rdd_model) %>%
mutate(across(everything(), ~ round(., 2))) %>%
gt() %>%
tab_header(title = "Regression Discontinuity Design (RDD) Summary")
# Display the summary table
rdd_summary
set.seed(123)
# Simulate data
n <- 200  # Total number of students
threshold <- 70  # Threshold for tutoring
# Simulate test scores (continuous independent variable)
test_scores <- runif(n, min = 50, max = 100)
# Simulate treatment assignment
treatment <- ifelse(test_scores >= threshold, 1, 0)
# Simulate academic performance (outcome)
# Performance is influenced by treatment and some random noise
treatment_effect <- 5  # Expected increase in performance due to tutoring
noise_sd <- 2  # Standard deviation of random noise
performance <- treatment * treatment_effect + rnorm(n, mean = 0, sd = noise_sd)
# Combine data into a data frame
data <- data.frame(Test_Scores = test_scores, Treatment = treatment, Performance = performance)
# Create a scatter plot with separate lines of best fit and a vertical line at the threshold
plot <- ggplot(data, aes(x = Test_Scores, y = Performance)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x * I(x < threshold), se = FALSE, color = "blue") +
geom_smooth(method = "lm", formula = y ~ x * I(x >= threshold), se = FALSE, color = "green") +
geom_vline(xintercept = threshold, linetype = "dashed", color = "red") +
labs(x = "Test Scores", y = "Academic Performance") +
theme_minimal()
# Display the plot
plot
# Estimate treatment effect using RDD
rdd_model <- lm(Performance ~ Treatment + Test_Scores + I(Test_Scores >= threshold), data = data)
# Get tidy summary of the regression model
rdd_summary <- tidy(rdd_model) %>%
mutate(across(everything(), ~ round(., 2))) %>%
gt() %>%
tab_header(title = "Regression Discontinuity Design (RDD) Summary")
# Set seed for reproducibility
set.seed(123)
# Simulate data
n <- 200  # Total number of students
threshold <- 70  # Threshold for tutoring
# Simulate test scores (continuous independent variable)
test_scores <- runif(n, min = 50, max = 100)
# Simulate treatment assignment
treatment <- ifelse(test_scores >= threshold, 1, 0)
treatment_effect <- 5  # Expected increase in performance due to tutoring
noise_sd <- 2  # Standard deviation of random noise
performance <- treatment * treatment_effect + rnorm(n, mean = 0, sd = noise_sd)
# Combine data into a data frame
data <- data.frame(Test_Scores = test_scores, Treatment = treatment, Performance = performance)
plot <- ggplot(data, aes(x = Test_Scores, y = Performance)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x * I(x < threshold), se = FALSE, color = "blue") +
geom_smooth(method = "lm", formula = y ~ x * I(x >= threshold), se = FALSE, color = "green") +
geom_vline(xintercept = threshold, linetype = "dashed", color = "red") +
labs(x = "Test Scores", y = "Academic Performance") +
theme_minimal()
# Display the plot
plot
# Estimate treatment effect using RDD
rdd_model <- lm(Performance ~ Treatment + Test_Scores + I(Test_Scores >= threshold), data = data)
rdd_summary <- tidy(rdd_model) %>%
mutate(across(everything(), ~ round(., 2))) %>%
gt() %>%
tab_header(title = "Regression Discontinuity Design (RDD) Summary")
# Set seed for reproducibility
set.seed(123)
# Simulate data
n <- 200  # Total number of students
threshold <- 70  # Threshold for tutoring
# Simulate test scores (continuous independent variable)
test_scores <- runif(n, min = 50, max = 100)
# Simulate treatment assignment
treatment <- ifelse(test_scores >= threshold, 1, 0)
# Simulate academic performance (outcome)
# Performance is influenced by treatment and some random noise
treatment_effect <- 5  # Expected increase in performance due to tutoring
noise_sd <- 2  # Standard deviation of random noise
performance <- treatment * treatment_effect + rnorm(n, mean = 0, sd = noise_sd)
# Combine data into a data frame
data <- data.frame(Test_Scores = test_scores, Treatment = treatment, Performance = performance)
# Create a scatter plot with a line of best fit and a vertical line at the threshold
plot <- ggplot(data, aes(x = Test_Scores, y = Performance)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
geom_vline(xintercept = threshold, linetype = "dashed", color = "red") +
labs(x = "Test Scores", y = "Academic Performance") +
theme_minimal()
# Display the plot
plot
# Estimate treatment effect using RDD
rdd_model <- lm(Performance ~ Treatment + Test_Scores + I(Test_Scores >= threshold), data = data)
# Display the summary of the regression model using gt package
rdd_summary <- broom::tidy(rdd_model) %>%
gt() %>%
tab_header(title = "Regression Discontinuity Design (RDD) Summary")
# Display the summary table
rdd_summary
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(gt)
library(broom)
# Set seed for reproducibility
set.seed(123)
# Simulate data
n <- 200  # Total number of students
threshold <- 70  # Threshold for tutoring
# Simulate test scores (continuous independent variable)
test_scores <- runif(n, min = 50, max = 100)
# Simulate treatment assignment
treatment <- ifelse(test_scores >= threshold, 1, 0)
# Simulate academic performance (outcome)
# Performance is influenced by treatment and some random noise
treatment_effect <- 5  # Expected increase in performance due to tutoring
noise_sd <- 2  # Standard deviation of random noise
performance <- treatment * treatment_effect + rnorm(n, mean = 0, sd = noise_sd)
# Combine data into a data frame
data <- data.frame(Test_Scores = test_scores, Treatment = treatment, Performance = performance)
# Create a scatter plot with separate lines of best fit and a vertical line at the threshold
plot <- ggplot(data, aes(x = Test_Scores, y = Performance)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x * I(x < threshold), se = FALSE, color = "blue") +
geom_smooth(method = "lm", formula = y ~ x * I(x >= threshold), se = FALSE, color = "green") +
geom_vline(xintercept = threshold, linetype = "dashed", color = "red") +
labs(x = "Test Scores", y = "Academic Performance") +
theme_minimal()
# Display the plot
plot
# Estimate treatment effect using RDD
rdd_model <- lm(Performance ~ Treatment + Test_Scores + I(Test_Scores >= threshold), data = data)
# Get tidy summary of the regression model
rdd_summary <- tidy(rdd_model) %>%
mutate(across(c(estimate, std.error, statistic, p.value), ~ round(., 2))) %>%
gt() %>%
tab_header(title = "Regression Discontinuity Design (RDD) Summary")
# Display the summary table
rdd_summary
# Set seed for reproducibility
set.seed(123)
# Simulate data
n <- 200  # Total number of students
threshold <- 70  # Threshold for tutoring
# Simulate test scores (continuous independent variable)
test_scores <- runif(n, min = 50, max = 100)
# Simulate treatment assignment
treatment <- ifelse(test_scores >= threshold, 1, 0)
# Simulate academic performance (outcome)
# Performance is influenced by treatment and some random noise
treatment_effect <- 5  # Expected increase in performance due to tutoring
noise_sd <- 2  # Standard deviation of random noise
performance <- treatment * treatment_effect + rnorm(n, mean = 0, sd = noise_sd)
# Combine data into a data frame
data <- data.frame(Test_Scores = test_scores, Treatment = treatment, Performance = performance)
# Create a scatter plot with a line of best fit and a vertical line at the threshold
plot <- ggplot(data, aes(x = Test_Scores, y = Performance)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
geom_vline(xintercept = threshold, linetype = "dashed", color = "red") +
labs(x = "Test Scores", y = "Academic Performance") +
theme_minimal()
# Display the plot
plot
# Set seed for reproducibility
set.seed(123)
n <- 200  # Total number of students
threshold <- 70  # Threshold for tutoring
# Simulate test scores (continuous independent variable)
test_scores <- runif(n, min = 50, max = 100)
# Simulate treatment assignment
treatment <- ifelse(test_scores >= threshold, 1, 0)
# Simulate academic performance (outcome)
# Performance is influenced by treatment and some random noise
treatment_effect <- 5  # Expected increase in performance due to tutoring
noise_sd <- 2  # Standard deviation of random noise
performance <- treatment * treatment_effect + rnorm(n, mean = 0, sd = noise_sd)
# Combine data into a data frame
data <- data.frame(Test_Scores = test_scores, Treatment = treatment, Performance = performance)
# Create a scatter plot with separate lines of best fit and a vertical line at the threshold
plot <- ggplot(data, aes(x = Test_Scores, y = Performance)) +
geom_point() +
geom_smooth(data = filter(data, Test_Scores < threshold), method = "lm", se = FALSE, color = "blue") +
geom_smooth(data = filter(data, Test_Scores >= threshold), method = "lm", se = FALSE, color = "green") +
geom_vline(xintercept = threshold, linetype = "dashed", color = "red") +
labs(x = "Test Scores", y = "Academic Performance") +
theme_minimal()
# Display the plot
plot
# Estimate treatment effect using RDD
rdd_model <- lm(Performance ~ Treatment + Test_Scores + I(Test_Scores >= threshold), data = data)
rdd_summary <- tidy(rdd_model) %>%
mutate(across(c(estimate, std.error, statistic, p.value), ~ round(., 2))) %>%
gt() %>%
tab_header(title = "Regression Discontinuity Design (RDD) Summary")
# Display the summary table
rdd_summary
# Install needed packages
install.packages("ggplot2")
# Install needed packages
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
install.packages("gt")
install.packages("gt")
install.packages("broom")
install.packages("broom")
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(gt)
library(broom)
# Set seed for reproducibility
set.seed(123)
# Simulate data
n <- 200  # Total number of students
threshold <- 70  # Threshold for tutoring
# Simulate test scores (continuous independent variable)
test_scores <- runif(n, min = 50, max = 100)
# Simulate treatment assignment
treatment <- ifelse(test_scores >= threshold, 1, 0)
# Simulate academic performance (outcome)
# Performance is influenced by treatment and some random noise
treatment_effect <- 5  # Expected increase in performance due to tutoring
noise_sd <- 2  # Standard deviation of random noise
performance <- treatment * treatment_effect + rnorm(n, mean = 0, sd = noise_sd)
# Combine data into a data frame
data <- data.frame(Test_Scores = test_scores, Treatment = treatment, Performance = performance)
# Create a scatter plot with separate lines of best fit and a vertical line at the threshold
plot <- ggplot(data, aes(x = Test_Scores, y = Performance)) +
geom_point() +
geom_smooth(data = filter(data, Test_Scores < threshold), method = "lm", se = FALSE, color = "blue") +
geom_smooth(data = filter(data, Test_Scores >= threshold), method = "lm", se = FALSE, color = "green") +
geom_vline(xintercept = threshold, linetype = "dashed", color = "red") +
labs(x = "Test Scores", y = "Academic Performance") +
theme_minimal()
# Display the plot
plot
# Estimate treatment effect using RDD
rdd_model <- lm(Performance ~ Treatment + Test_Scores + I(Test_Scores >= threshold), data = data)
# Get tidy summary of the regression model
rdd_summary <- tidy(rdd_model) %>%
mutate(across(c(estimate, std.error, statistic, p.value), ~ round(., 2))) %>%
gt() %>%
tab_header(title = "Regression Discontinuity Design (RDD) Summary")
# Display the summary table
rdd_summary
# Get tidy summary of the regression model
rdd_summary <- tidy(rdd_model) %>%
mutate(across(c(estimate, std.error, statistic, p.value), ~ round(., 4))) %>%
gt() %>%
tab_header(title = "Regression Discontinuity Design (RDD) Summary")
# Display the summary table
rdd_summary
# Estimate treatment effect using RDD
rdd_model <- lm(Performance ~ Treatment + Test_Scores + I(Test_Scores >= threshold), data = data)
# Get tidy summary of the regression model
rdd_summary <- tidy(rdd_model) %>%
mutate(p.value = ifelse(p.value < 0.001, "<.001", round(p.value, 3))) %>%
gt() %>%
tab_header(title = "Regression Discontinuity Design (RDD) Summary")
# Display the summary table
rdd_summary
# Get tidy summary of the regression model
rdd_summary <- tidy(rdd_model) %>%
mutate(across(c(estimate, std.error, statistic), ~ round(., 2)),
p.value = ifelse(p.value < 0.001, "<.001", round(p.value, 2))) %>%
gt() %>%
tab_header(title = "Regression Discontinuity Design (RDD) Summary")
# Display the summary table
rdd_summary
library(quarto)
library(quarto, lib.loc = "/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
install.packages(c("admisc", "afex", "agricolae", "aRtsy", "bayestestR", "BH", "car", "checkmate", "classInt", "cubature", "datawizard", "deldir", "DescTools", "deSolve", "e1071", "EFAtools", "effectsize", "emmeans", "fontawesome", "Formula", "future", "future.apply", "ggfun", "ggimage", "ggplotify", "ggrepel", "gmp", "gnm", "GPArotation", "hexbin", "Hmisc", "htmltools", "htmlwidgets", "httpuv", "insight", "interp", "jmvcore", "klaR", "languageserver", "lintr", "lme4", "magick", "MatrixModels", "matrixStats", "metafor", "multcomp", "multcompView", "mvtnorm", "np", "parallelly", "parameters", "patchwork", "pbapply", "pbkrtest", "performance", "pkgload", "progressr", "promises", "psych", "purrr", "quantreg", "questionr", "qvcalc", "rbibutils", "rcompanion", "RcppArmadillo", "Rdpack", "remotes", "repr", "reticulate", "rlang", "sets", "shiny", "showtext", "sourcetools", "styler", "testthat", "TH.data", "tinytex", "vcd", "vcdExtra", "vctrs", "vitae", "waldo", "webshot", "yulab.utils", "zoo"))
install.packages(c("bit", "blob", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "class", "cli", "cluster", "codetools", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "dplyr", "dslabs", "dtplyr", "evaluate", "fansi", "fastmap", "forcats", "foreign", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gt", "gtable", "gtsummary", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labelled", "later", "lattice", "lavaan", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "mnormt", "modelr", "nlme", "nnet", "openssl", "packrat", "patchwork", "pillar", "png", "processx", "ps", "psych", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "rsconnect", "rstudioapi", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tzdb", "utf8", "uuid", "V8", "vctrs", "viridis", "viridisLite", "vroom", "xfun", "xml2", "yaml"), lib="/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
install.packages(c("bit", "blob", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "class", "cli", "cluster", "codetools", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "dplyr", "dslabs", "dtplyr", "evaluate", "fansi", "fastmap", "forcats", "foreign", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gt", "gtable", "gtsummary", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labelled", "later", "lattice", "lavaan", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "mnormt", "modelr", "nlme", "nnet", "openssl", "packrat", "patchwork", "pillar", "png", "processx", "ps", "psych", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "rsconnect", "rstudioapi", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tzdb", "utf8", "uuid", "V8", "vctrs", "viridis", "viridisLite", "vroom", "xfun", "xml2", "yaml"), lib = "/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
install.packages(c("bit", "blob", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "class", "cli", "cluster", "codetools", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "dplyr", "dslabs", "dtplyr", "evaluate", "fansi", "fastmap", "forcats", "foreign", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gt", "gtable", "gtsummary", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labelled", "later", "lattice", "lavaan", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "mnormt", "modelr", "nlme", "nnet", "openssl", "packrat", "patchwork", "pillar", "png", "processx", "ps", "psych", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "rsconnect", "rstudioapi", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tzdb", "utf8", "uuid", "V8", "vctrs", "viridis", "viridisLite", "vroom", "xfun", "xml2", "yaml"), lib = "/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
install.packages(c("bit", "blob", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "class", "cli", "cluster", "codetools", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "dplyr", "dslabs", "dtplyr", "evaluate", "fansi", "fastmap", "forcats", "foreign", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gt", "gtable", "gtsummary", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labelled", "later", "lattice", "lavaan", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "mnormt", "modelr", "nlme", "nnet", "openssl", "packrat", "patchwork", "pillar", "png", "processx", "ps", "psych", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "rsconnect", "rstudioapi", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tzdb", "utf8", "uuid", "V8", "vctrs", "viridis", "viridisLite", "vroom", "xfun", "xml2", "yaml"), lib = "/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
install.packages(c("bit", "blob", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "class", "cli", "cluster", "codetools", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "dplyr", "dslabs", "dtplyr", "evaluate", "fansi", "fastmap", "forcats", "foreign", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gt", "gtable", "gtsummary", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labelled", "later", "lattice", "lavaan", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "mnormt", "modelr", "nlme", "nnet", "openssl", "packrat", "patchwork", "pillar", "png", "processx", "ps", "psych", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "rsconnect", "rstudioapi", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tzdb", "utf8", "uuid", "V8", "vctrs", "viridis", "viridisLite", "vroom", "xfun", "xml2", "yaml"), lib = "/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
install.packages(c("admisc", "afex", "agricolae", "aRtsy", "bayestestR", "BH", "car", "checkmate", "classInt", "cubature", "datawizard", "deldir", "DescTools", "deSolve", "e1071", "EFAtools", "effectsize", "emmeans", "fontawesome", "Formula", "future", "future.apply", "ggfun", "ggimage", "ggplotify", "ggrepel", "gmp", "gnm", "GPArotation", "hexbin", "Hmisc", "htmltools", "htmlwidgets", "httpuv", "insight", "interp", "jmvcore", "klaR", "languageserver", "lintr", "lme4", "magick", "MatrixModels", "matrixStats", "metafor", "multcomp", "multcompView", "mvtnorm", "np", "parallelly", "parameters", "patchwork", "pbapply", "pbkrtest", "performance", "pkgload", "progressr", "promises", "psych", "purrr", "quantreg", "questionr", "qvcalc", "rbibutils", "rcompanion", "RcppArmadillo", "Rdpack", "remotes", "repr", "reticulate", "rlang", "sets", "shiny", "showtext", "sourcetools", "styler", "testthat", "TH.data", "tinytex", "vcd", "vcdExtra", "vctrs", "vitae", "waldo", "webshot", "yulab.utils", "zoo"))
source("~/.active-rstudio-document", echo=TRUE)
